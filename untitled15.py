# -*- coding: utf-8 -*-
"""Untitled15.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16e6NdgB_27rxuG6m0ZnVKATkFUDAxyYZ
"""

pip install mysql-connector psycopg2 cx_Oracle

import ipywidgets as widgets
from IPython.display import display
import psycopg2
import mysql.connector
import cx_Oracle

# Simulating credentials for the connections (Replace with your actual credentials)
credentials = {
    "Postgres": {
        "host": "localhost",
        "user": "your_postgres_user",
        "password": "your_postgres_password",
        "database": "postgres_db"
    },
    "MySQL": {
        "host": "localhost",
        "user": "your_mysql_user",
        "password": "your_mysql_password",
        "database": "mysql_db"
    },
    "Oracle": {
        "host": "localhost",
        "user": "your_oracle_user",
        "password": "your_oracle_password",
        "database": "oracle_db"
    }
}

# Step 1: Create a dropdown to select database type
dropdown = widgets.Dropdown(
    options=['Oracle', 'Postgres', 'MySQL'],
    description='Database Type:',
    disabled=False
)

connect_button = widgets.Button(description="Connect")

# Display the dropdown and connect button
display(dropdown, connect_button)

# Step 2: Function for handling the connect button click
def on_connect_button_click(b):
    # Hide the dropdown and connect button after clicking "Connect"
    dropdown.close()
    connect_button.close()

    # Show login form (username and password)
    username_input = widgets.Text(placeholder="Enter username", description="Username:")
    password_input = widgets.Password(placeholder="Enter password", description="Password:")

    login_button = widgets.Button(description="Login")
    reset_button = widgets.Button(description="Reset")

    display(username_input, password_input, login_button, reset_button)

    # Handle login button click
    def on_login_button_click(b):
        username = username_input.value
        password = password_input.value
        print(f"Logged in with username: {username} and password: {password}")
        print(f"Connected to {dropdown.value} database!")  # Simulate connection

        # Show import/export options after login
        show_import_export_options(username, password)

    # Handle reset button click (clear inputs)
    def on_reset_button_click(b):
        username_input.value = ""
        password_input.value = ""

    login_button.on_click(on_login_button_click)
    reset_button.on_click(on_reset_button_click)

# Step 3: Function to show Import/Export buttons after login
def show_import_export_options(username, password):
    # Create Import and Export buttons
    import_button = widgets.Button(description="Import")
    export_button = widgets.Button(description="Export")

    # Display the import/export buttons
    display(import_button, export_button)

    # Simulate actions when buttons are clicked
    def on_import_button_click(b):
        print("Importing data...")
        show_select_tables_and_databases("Import", username, password)

    def on_export_button_click(b):
        print("Exporting data...")
        show_select_tables_and_databases("Export", username, password)

    import_button.on_click(on_import_button_click)
    export_button.on_click(on_export_button_click)

# Step 4: Show dropdowns for selecting tables and databases based on action (Import/Export)
def show_select_tables_and_databases(action, username, password):
    # Connect to the selected database
    connection = None
    if dropdown.value == "Postgres":
        connection = connect_postgres(username, password)
    elif dropdown.value == "MySQL":
        connection = connect_mysql(username, password)
    elif dropdown.value == "Oracle":
        connection = connect_oracle(username, password)

    if connection is None:
        print(f"Unable to connect to {dropdown.value} database.")
        return

    # Fetch databases and tables
    dbs = get_databases(connection)
    tables = get_tables(connection)

    # Show the database selection dropdown
    db_dropdown = widgets.Dropdown(
        options=dbs,
        description=f'Select Database to {action}:',
        disabled=False
    )

    # Show the table selection dropdown (multiple selection)
    table_dropdown = widgets.SelectMultiple(
        options=tables,
        description='Select Tables:',
        disabled=False
    )

    # Create the action button for Import or Export
    action_button = widgets.Button(description=f"{action} Data")

    # Display the database and table selection widgets
    display(db_dropdown, table_dropdown, action_button)

    # Handle action button click
    def on_action_button_click(b):
        selected_db = db_dropdown.value
        selected_tables = table_dropdown.value
        print(f"{action}ing data from {selected_db} with tables: {selected_tables}")

        # Simulate import/export action
        print(f"{action} completed!")

    action_button.on_click(on_action_button_click)

# Function to connect to PostgreSQL database
def connect_postgres(username, password):
    try:
        conn = psycopg2.connect(
            host=credentials["Postgres"]["host"],
            user=username,
            password=password,
            dbname=credentials["Postgres"]["database"]
        )
        print("Connected to PostgreSQL!")
        return conn
    except Exception as e:
        print(f"Failed to connect to PostgreSQL: {e}")
        return None

# Function to connect to MySQL database
def connect_mysql(username, password):
    try:
        conn = mysql.connector.connect(
            host=credentials["MySQL"]["host"],
            user=username,
            password=password,
            database=credentials["MySQL"]["database"]
        )
        print("Connected to MySQL!")
        return conn
    except Exception as e:
        print(f"Failed to connect to MySQL: {e}")
        return None

# Function to connect to Oracle database
def connect_oracle(username, password):
    try:
        dsn = cx_Oracle.makedsn(credentials["Oracle"]["host"], 1521, credentials["Oracle"]["database"])
        conn = cx_Oracle.connect(username, password, dsn)
        print("Connected to Oracle!")
        return conn
    except Exception as e:
        print(f"Failed to connect to Oracle: {e}")
        return None

# Function to fetch databases (PostgreSQL/MySQL)
def get_databases(connection):
    if isinstance(connection, psycopg2.extensions.connection):
        # PostgreSQL: Return list of databases
        cursor = connection.cursor()
        cursor.execute("SELECT datname FROM pg_database WHERE datistemplate = false;")
        return [db[0] for db in cursor.fetchall()]
    elif isinstance(connection, mysql.connector.connection.MySQLConnection):
        # MySQL: Return list of databases
        cursor = connection.cursor()
        cursor.execute("SHOW DATABASES;")
        return [db[0] for db in cursor.fetchall()]
    elif isinstance(connection, cx_Oracle.Connection):
        # Oracle: Return a list of schemas (databases)
        cursor = connection.cursor()
        cursor.execute("SELECT username FROM all_users;")
        return [row[0] for row in cursor.fetchall()]
    return []

# Function to fetch tables from selected database
def get_tables(connection):
    cursor = connection.cursor()
    cursor.execute("SELECT table_name FROM information_schema.tables WHERE table_schema = 'public';")
    return [table[0] for table in cursor.fetchall()]

# Step 5: Attach the connect button click event
connect_button.on_click(on_connect_button_click)